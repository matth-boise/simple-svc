apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.name }}-envoy
  namespace: default
data:
  envoy.yaml: >
    static_resources:
      listeners:
      {{/* REVISIT: might be better to split/modify the ingress listener (or just add another route) so we differentiate
           - listens for external fqdn host header - this is ingress from internet
           - listens for service name host header - this is east-west ingress (from within cluster)
      */}}
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.envoy.containerPort }}
        {{/* default is false.  uses the original destination address, not the changed address after iptables.
        */}}
        use_original_dst: true
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              codec_type: auto
              tracing:
                operation_name: ingress
              stat_prefix: ingress-http
              route_config:
                name: service_route
                virtual_hosts:
                - name: {{ .Values.name }}
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    decorator:
                      operation: {{ .Values.name }}-envoy-ingress
                    route:
                      cluster: local-service
              http_filters:
              - name: envoy.router
                config: {}

      {{/* this listener is used if app tries to access service-b as service-b-envoy.
           service-b-envoy resolves to localhost:80 (via ExternalName Service), and service-b-envoy is mapped to service-b here.
      */}}
      - address:
          socket_address:
            address: 127.0.0.1
            port_value: {{ .Values.envoy.egressPort }}
      {{/* this is v2 !!!??
        FilterChainMatch:
          ConnectionSourceType: LOCAL
      */}}
        use_original_dst: false
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              tracing:
                operation_name: egress
              stat_prefix: egress-http
              {{/* REVISIT: do i need to create the specific routes ahead of time????? */}}
              route_config:
                name: services_route
                virtual_hosts:
                - name: service-a-envoy
                  domains:
                  - "service-a-envoy"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      {{/* auto_host_rewrite: true does the same thing
                      host_rewrite: service-a
                      */}}
                      auto_host_rewrite: true
                      cluster: service-a
                    decorator:
                      operation: service-a-eastwest
                - name: service-b-envoy
                  domains:
                  - "service-b-envoy"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      {{/*
                      host_rewrite: service-b
                      */}}
                      auto_host_rewrite: true
                      cluster: service-b
                    decorator:
                      operation: service-b-eastwest
              http_filters:
              - name: envoy.router
                config: {}

      clusters:
      - name: local-service
        connect_timeout: 0.250s
        type: strict_dns
        lb_policy: round_robin
        hosts:
        - socket_address:
            address: 127.0.0.1
            port_value: {{ .Values.containerPort }}
      - name: service-a
        connect_timeout: 0.250s
        {{/* i believe string_dns actually gets pod addresses.  thus, let's send to pod containerPort */}}
        type: strict_dns
        lb_policy: round_robin
        hosts:
        - socket_address:
            address: service-a
            {{/* i believe string_dns actually gets pod addresses.  thus, let's send to pod containerPort
                 NO.  something not as expected... TODO: try to replicate this using v2
              */}}
            port_value: {{ .Values.servicePort }}
      - name: service-b
        connect_timeout: 0.250s
        type: strict_dns
        lb_policy: round_robin
        hosts:
        - socket_address:
            address: service-b
            port_value: {{ .Values.servicePort }}
      - name: jaeger-zipkin
        connect_timeout: 1s
        type: strict_dns
        lb_policy: round_robin
        hosts:
        - socket_address:
            address: jaeger-zipkin
            port_value: 9411
    tracing:
      http:
        name: envoy.zipkin
        config:
          collector_cluster: jaeger-zipkin
          collector_endpoint: "/api/v1/spans"
{{/* default is true.  envoy jaeger sandbox has this as false.  setting to false makes jaeger UI look a bit better
*/}}
          shared_span_context: false
    admin:
      access_log_path: "/var/log/admin-access.log"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
